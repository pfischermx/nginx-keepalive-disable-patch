diff --git a/src/http/ngx_http_header_filter_module.c b/src/http/ngx_http_header_filter_module.c
index 9b89405..2f53ac5 100644
--- a/src/http/ngx_http_header_filter_module.c
+++ b/src/http/ngx_http_header_filter_module.c
@@ -168,6 +168,13 @@ ngx_http_header_filter(ngx_http_request_t *r)
     ngx_http_core_loc_conf_t  *clcf;
     ngx_http_core_srv_conf_t  *cscf;
     u_char                     addr[NGX_SOCKADDR_STRLEN];
+    ngx_uint_t                 disable_keep_alive_now;
+
+    if (r->disable_keep_alive_now == 1) {
+	disable_keep_alive_now = 1;
+    } else {
+	disable_keep_alive_now = 0;
+    }
 
     if (r->header_sent) {
         return NGX_OK;
@@ -378,7 +385,7 @@ ngx_http_header_filter(ngx_http_request_t *r)
     if (r->headers_out.status == NGX_HTTP_SWITCHING_PROTOCOLS) {
         len += sizeof("Connection: upgrade" CRLF) - 1;
 
-    } else if (r->keepalive) {
+    } else if (r->keepalive && disable_keep_alive_now != 1) {
         len += sizeof("Connection: keep-alive" CRLF) - 1;
 
         /*
@@ -555,7 +562,7 @@ ngx_http_header_filter(ngx_http_request_t *r)
         b->last = ngx_cpymem(b->last, "Connection: upgrade" CRLF,
                              sizeof("Connection: upgrade" CRLF) - 1);
 
-    } else if (r->keepalive) {
+    } else if (r->keepalive && disable_keep_alive_now != 1) {
         b->last = ngx_cpymem(b->last, "Connection: keep-alive" CRLF,
                              sizeof("Connection: keep-alive" CRLF) - 1);
 
diff --git a/src/http/ngx_http_request.h b/src/http/ngx_http_request.h
index 421004a..2bd401c 100644
--- a/src/http/ngx_http_request.h
+++ b/src/http/ngx_http_request.h
@@ -433,6 +433,8 @@ struct ngx_http_request_s {
     size_t                            limit_rate;
     size_t                            limit_rate_after;
 
+    ngx_uint_t 			      disable_keep_alive_now;
+
     /* used to learn the Apache compatible response length without a header */
     size_t                            header_size;
 
diff --git a/src/http/ngx_http_variables.c b/src/http/ngx_http_variables.c
index ab82177..346e01e 100644
--- a/src/http/ngx_http_variables.c
+++ b/src/http/ngx_http_variables.c
@@ -27,6 +27,11 @@ static void ngx_http_variable_request_set_size(ngx_http_request_t *r,
 static ngx_int_t ngx_http_variable_header(ngx_http_request_t *r,
     ngx_http_variable_value_t *v, uintptr_t data);
 
+static ngx_int_t ngx_http_variable_request_disable_keep_alive_now(ngx_http_request_t *r,
+    ngx_http_variable_value_t *v, uintptr_t data);
+static void ngx_http_variable_request_set_disable_keep_alive_now(ngx_http_request_t *r,
+    ngx_http_variable_value_t *v, uintptr_t data);
+
 static ngx_int_t ngx_http_variable_cookies(ngx_http_request_t *r,
     ngx_http_variable_value_t *v, uintptr_t data);
 static ngx_int_t ngx_http_variable_headers(ngx_http_request_t *r,
@@ -312,6 +317,12 @@ static ngx_http_variable_t  ngx_http_core_variables[] = {
     { ngx_string("sent_http_keep_alive"), NULL,
       ngx_http_variable_sent_keep_alive, 0, 0, 0 },
 
+    { ngx_string("disable_keep_alive_now"),
+      ngx_http_variable_request_set_disable_keep_alive_now,
+      ngx_http_variable_request_disable_keep_alive_now,
+      0,
+      NGX_HTTP_VAR_CHANGEABLE|NGX_HTTP_VAR_NOCACHEABLE, 0 },
+
     { ngx_string("sent_http_transfer_encoding"), NULL,
       ngx_http_variable_sent_transfer_encoding, 0, 0, 0 },
 
@@ -806,6 +817,31 @@ ngx_http_variable_request_set_size(ngx_http_request_t *r,
     return;
 }
 
+static void
+ngx_http_variable_request_set_disable_keep_alive_now(ngx_http_request_t *r,
+    ngx_http_variable_value_t *v, uintptr_t data)
+{
+    ngx_str_t  val;
+
+    val.len = v->len;
+    val.data = v->data;
+    if (ngx_strcmp(val.data, "yes") == 0) {
+	r->disable_keep_alive_now = 1;
+    } else {
+	r->disable_keep_alive_now = 0;
+    }
+    return;
+}
+
+static ngx_int_t
+ngx_http_variable_request_disable_keep_alive_now(ngx_http_request_t *r,
+    ngx_http_variable_value_t *v, uintptr_t data)
+{
+    v->valid = 1;
+    v->no_cacheable = 0;
+    v->not_found = 0;
+    return NGX_OK;
+}
 
 static ngx_int_t
 ngx_http_variable_header(ngx_http_request_t *r, ngx_http_variable_value_t *v,
